plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id 'war'
	id 'jacoco'
}

group = 'study.springboot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.google.code.gson:gson'
	testImplementation 'com.h2database:h2'
	implementation 'org.jacoco:org.jacoco.core:0.8.7'
}

tasks.named('test') {

    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = ["**/ProductServiceImpl.class"]
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.named('jacocoTestReport') {
	reports {
		html.enabled true
	}
	dependsOn test
}

tasks.named('jacocoTestCoverageVerification') {
	violationRules {
		rule {
			element = "BUNDLE"
			limit {
				counter = "INSTRUCTION"
				value = "COVEREDRATIO"
				minimum = "0.80".toBigDecimal()
			}
		}
		
		rule {
			element = "METHOD"
			limit {
				counter = "LINE"
				value = "TOTALCOUNT"
				maximum = "50".toBigDecimal()
			}
		}
	}
}